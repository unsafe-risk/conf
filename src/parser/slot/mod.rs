//! Module slot is generated by gogll. Do not edit. 

extern crate lazy_static;

use lazy_static::lazy_static;

use super::symbols::{Symbol, NT, T};
use std::collections::HashMap;
use std::fmt;

#[derive(Hash, Eq, PartialEq, Clone, Copy, Debug)]
pub enum Label { 
    Assignment_Statement0R0,
    Assignment_Statement0R1,
    Assignment_Statement0R2,
    Assignment_Statement0R3,
    Assignment_Statement0R4,
    Compound_Statement0R0,
    Compound_Statement0R1,
    Compound_Statement0R2,
    Compound_Statement1R0,
    Compound_Statement1R1,
    Compound_Statement1R2,
    Compound_Statement1R3,
    Declaration_Statement0R0,
    Declaration_Statement0R1,
    Declaration_Statement0R2,
    Declaration_Statement0R3,
    Declaration_Statement0R4,
    Declaration_Statement0R5,
    Declaration_Statement0R6,
    Declaration_Statement0R7,
    Declaration_Statement1R0,
    Declaration_Statement1R1,
    Declaration_Statement1R2,
    Declaration_Statement1R3,
    Declaration_Statement1R4,
    Declaration_Statement1R5,
    Declaration_Statement1R6,
    Declaration_Statement1R7,
    Declaration_Statement1R8,
    Empty_Statement0R0,
    Empty_Statement0R1,
    Expression0R0,
    Expression0R1,
    Expression1R0,
    Expression1R1,
    Expression2R0,
    Expression2R1,
    Expression_Statement0R0,
    Expression_Statement0R1,
    Expression_Statement0R2,
    Expression_Statement1R0,
    Expression_Statement1R1,
    For0R0,
    For0R1,
    For0R2,
    For0R3,
    For0R4,
    For0R5,
    For0R6,
    For0R7,
    For1R0,
    For1R1,
    For1R2,
    For1R3,
    For1R4,
    For1R5,
    For1R6,
    Function_Argument0R0,
    Function_Argument0R1,
    Function_Argument0R2,
    Function_Argument0R3,
    Function_Argument_List0R0,
    Function_Argument_List0R1,
    Function_Argument_List1R0,
    Function_Argument_List1R1,
    Function_Argument_List_Body0R0,
    Function_Argument_List_Body0R1,
    Function_Argument_List_Body0R2,
    Function_Argument_List_Body1R0,
    Function_Argument_List_Body1R1,
    Function_Argument_List_Body1R2,
    Function_Argument_List_Body2R0,
    Function_Argument_List_Body2R1,
    Function_Argument_List_Body2R2,
    Function_Argument_List_Body2R3,
    Function_Statement0R0,
    Function_Statement0R1,
    Function_Statement0R2,
    Function_Statement0R3,
    Function_Statement0R4,
    Function_Statement0R5,
    Function_Statement0R6,
    Function_Statement0R7,
    Function_Statement1R0,
    Function_Statement1R1,
    Function_Statement1R2,
    Function_Statement1R3,
    Function_Statement1R4,
    Function_Statement1R5,
    Function_Statement1R6,
    GoGLL0R0,
    GoGLL0R1,
    Identifier_Expression0R0,
    Identifier_Expression0R1,
    IncDec_Expression0R0,
    IncDec_Expression0R1,
    IncDec_Expression0R2,
    IncDec_Expression1R0,
    IncDec_Expression1R1,
    IncDec_Expression1R2,
    Literal_Expression0R0,
    Literal_Expression0R1,
    Literal_Expression1R0,
    Literal_Expression1R1,
    Literal_Expression2R0,
    Literal_Expression2R1,
    Return_Statement0R0,
    Return_Statement0R1,
    Return_Statement0R2,
    Return_Statement0R3,
    Simple_Statement0R0,
    Simple_Statement0R1,
    Simple_Statement1R0,
    Simple_Statement1R1,
    Simple_Statement2R0,
    Simple_Statement2R1,
    Simple_Statement3R0,
    Simple_Statement3R1,
    Statement0R0,
    Statement0R1,
    Statement1R0,
    Statement1R1,
    Statement2R0,
    Statement2R1,
    Statement3R0,
    Statement3R1,
    Statement4R0,
    Statement4R1,
    Statement5R0,
    Statement5R1,
    Statement_List0R0,
    Statement_List0R1,
    Statement_List1R0,
    Statement_List1R1,
    Statement_List1R2,
}

#[allow(dead_code)]
pub struct Slot {
    nt:      NT,
    alt:     usize,
    pos:     usize,
    symbols: Vec<Symbol>,
    label: 	 Label,
}

#[derive(Hash, Eq, PartialEq)]
pub struct Index {
    pub nt:      NT,
    pub alt:     usize,
    pub pos:     usize,
}

#[allow(dead_code)]
pub fn get_alternates(nt: &NT) -> &'static Vec<Label> {
    if let Some(alts) = ALTERNATES.get(nt) {
        return alts
    }
    panic!("{} has no alternates", nt)
}

#[allow(dead_code)]
pub fn get_label(nt: &NT, alt: usize, pos: usize) -> Label {
    if let Some(l) = LABELS.get(&Index{nt: nt.clone(), alt: alt, pos: pos}) {
        return l.clone()
    }
    panic!("No label for {} alt {} pos {}", nt, alt, pos)
}

impl <'a>Label {
    #[allow(dead_code)]
    pub fn eor(&self) -> bool {
        self.slot().eor()
    }
    
    #[allow(dead_code)]
    pub fn head(&self) -> &'static NT {
        &self.slot().nt
    }
    
    pub fn index(&self) -> Index {
        let s = self.slot();
        Index{nt: s.nt, alt: s.alt, pos: s.pos}
    }
    
    #[allow(dead_code)]
    pub fn alternate(&self) -> usize {
        self.slot().alt
    }
    
    #[allow(dead_code)]
    pub fn pos(&self) -> usize {
        self.slot().pos
    }
    
    #[allow(dead_code)]
    pub fn slot(&self) -> &'static Slot {
        if let Some(s) = SLOTS.get(self) {
            return s
        }
        panic!("Invalid slot label {}", self)
    }

    #[allow(dead_code)]
    pub fn symbols(&self) -> &'a Vec<Symbol> {
        &self.slot().symbols
    }
}
/*** end of impl Label***/

impl fmt::Display for Label {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let slt = self.slot();
        let mut s = format!("{} :", slt.nt);
        for (i, sym) in slt.symbols.iter().enumerate() {
            if i == slt.pos {
                s.push_str("•")
            }
            s.push_str(&format!("{} ", sym));
        }
        write!(f, "{}", s)
    }
}

impl Slot {
    #[allow(dead_code)]
    pub fn eor(&self) -> bool {
        self.pos >= self.symbols.len()
    }    
} /*** impl Slot ***/


impl fmt::Display for Slot {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let mut s = format!("{} : ", self.nt);
        for (i, sym) in self.symbols.iter().enumerate() {
            if i == self.pos {
                s.push_str("•")
            }
            s.push_str(&format!("{} ", sym));
        }
        if self.pos >= self.symbols.len() {
            s.push_str("•")
        }
        write!(f, "{}", s)
    }
}

lazy_static! {
    static ref ALTERNATES: HashMap<NT, Vec<Label>> = {
        let mut m = HashMap::new(); 
        m.insert(NT::GoGLL, 
            vec![ 
                Label::GoGLL0R0,
            ]);
        m.insert(NT::Assignment_Statement, 
            vec![ 
                Label::Assignment_Statement0R0,
            ]);
        m.insert(NT::Declaration_Statement, 
            vec![ 
                Label::Declaration_Statement0R0,
                Label::Declaration_Statement1R0,
            ]);
        m.insert(NT::Expression_Statement, 
            vec![ 
                Label::Expression_Statement0R0,
                Label::Expression_Statement1R0,
            ]);
        m.insert(NT::Function_Argument_List, 
            vec![ 
                Label::Function_Argument_List0R0,
                Label::Function_Argument_List1R0,
            ]);
        m.insert(NT::Function_Argument_List_Body, 
            vec![ 
                Label::Function_Argument_List_Body0R0,
                Label::Function_Argument_List_Body1R0,
                Label::Function_Argument_List_Body2R0,
            ]);
        m.insert(NT::Function_Argument, 
            vec![ 
                Label::Function_Argument0R0,
            ]);
        m.insert(NT::Function_Statement, 
            vec![ 
                Label::Function_Statement0R0,
                Label::Function_Statement1R0,
            ]);
        m.insert(NT::Return_Statement, 
            vec![ 
                Label::Return_Statement0R0,
            ]);
        m.insert(NT::Empty_Statement, 
            vec![ 
                Label::Empty_Statement0R0,
            ]);
        m.insert(NT::Simple_Statement, 
            vec![ 
                Label::Simple_Statement0R0,
                Label::Simple_Statement1R0,
                Label::Simple_Statement2R0,
                Label::Simple_Statement3R0,
            ]);
        m.insert(NT::IncDec_Expression, 
            vec![ 
                Label::IncDec_Expression0R0,
                Label::IncDec_Expression1R0,
            ]);
        m.insert(NT::Literal_Expression, 
            vec![ 
                Label::Literal_Expression0R0,
                Label::Literal_Expression1R0,
                Label::Literal_Expression2R0,
            ]);
        m.insert(NT::Identifier_Expression, 
            vec![ 
                Label::Identifier_Expression0R0,
            ]);
        m.insert(NT::Expression, 
            vec![ 
                Label::Expression0R0,
                Label::Expression1R0,
                Label::Expression2R0,
            ]);
        m.insert(NT::For, 
            vec![ 
                Label::For0R0,
                Label::For1R0,
            ]);
        m.insert(NT::Statement_List, 
            vec![ 
                Label::Statement_List0R0,
                Label::Statement_List1R0,
            ]);
        m.insert(NT::Compound_Statement, 
            vec![ 
                Label::Compound_Statement0R0,
                Label::Compound_Statement1R0,
            ]);
        m.insert(NT::Statement, 
            vec![ 
                Label::Statement0R0,
                Label::Statement1R0,
                Label::Statement2R0,
                Label::Statement3R0,
                Label::Statement4R0,
                Label::Statement5R0,
            ]);
        m
     };

    static ref LABELS: HashMap<Index, Label> = { 
        let mut m = HashMap::new(); 
        m.insert(Index{nt:NT::Assignment_Statement, alt:0, pos:0}, Label::Assignment_Statement0R0); 
        m.insert(Index{nt:NT::Assignment_Statement, alt:0, pos:1}, Label::Assignment_Statement0R1); 
        m.insert(Index{nt:NT::Assignment_Statement, alt:0, pos:2}, Label::Assignment_Statement0R2); 
        m.insert(Index{nt:NT::Assignment_Statement, alt:0, pos:3}, Label::Assignment_Statement0R3); 
        m.insert(Index{nt:NT::Assignment_Statement, alt:0, pos:4}, Label::Assignment_Statement0R4); 
        m.insert(Index{nt:NT::Compound_Statement, alt:0, pos:0}, Label::Compound_Statement0R0); 
        m.insert(Index{nt:NT::Compound_Statement, alt:0, pos:1}, Label::Compound_Statement0R1); 
        m.insert(Index{nt:NT::Compound_Statement, alt:0, pos:2}, Label::Compound_Statement0R2); 
        m.insert(Index{nt:NT::Compound_Statement, alt:1, pos:0}, Label::Compound_Statement1R0); 
        m.insert(Index{nt:NT::Compound_Statement, alt:1, pos:1}, Label::Compound_Statement1R1); 
        m.insert(Index{nt:NT::Compound_Statement, alt:1, pos:2}, Label::Compound_Statement1R2); 
        m.insert(Index{nt:NT::Compound_Statement, alt:1, pos:3}, Label::Compound_Statement1R3); 
        m.insert(Index{nt:NT::Declaration_Statement, alt:0, pos:0}, Label::Declaration_Statement0R0); 
        m.insert(Index{nt:NT::Declaration_Statement, alt:0, pos:1}, Label::Declaration_Statement0R1); 
        m.insert(Index{nt:NT::Declaration_Statement, alt:0, pos:2}, Label::Declaration_Statement0R2); 
        m.insert(Index{nt:NT::Declaration_Statement, alt:0, pos:3}, Label::Declaration_Statement0R3); 
        m.insert(Index{nt:NT::Declaration_Statement, alt:0, pos:4}, Label::Declaration_Statement0R4); 
        m.insert(Index{nt:NT::Declaration_Statement, alt:0, pos:5}, Label::Declaration_Statement0R5); 
        m.insert(Index{nt:NT::Declaration_Statement, alt:0, pos:6}, Label::Declaration_Statement0R6); 
        m.insert(Index{nt:NT::Declaration_Statement, alt:0, pos:7}, Label::Declaration_Statement0R7); 
        m.insert(Index{nt:NT::Declaration_Statement, alt:1, pos:0}, Label::Declaration_Statement1R0); 
        m.insert(Index{nt:NT::Declaration_Statement, alt:1, pos:1}, Label::Declaration_Statement1R1); 
        m.insert(Index{nt:NT::Declaration_Statement, alt:1, pos:2}, Label::Declaration_Statement1R2); 
        m.insert(Index{nt:NT::Declaration_Statement, alt:1, pos:3}, Label::Declaration_Statement1R3); 
        m.insert(Index{nt:NT::Declaration_Statement, alt:1, pos:4}, Label::Declaration_Statement1R4); 
        m.insert(Index{nt:NT::Declaration_Statement, alt:1, pos:5}, Label::Declaration_Statement1R5); 
        m.insert(Index{nt:NT::Declaration_Statement, alt:1, pos:6}, Label::Declaration_Statement1R6); 
        m.insert(Index{nt:NT::Declaration_Statement, alt:1, pos:7}, Label::Declaration_Statement1R7); 
        m.insert(Index{nt:NT::Declaration_Statement, alt:1, pos:8}, Label::Declaration_Statement1R8); 
        m.insert(Index{nt:NT::Empty_Statement, alt:0, pos:0}, Label::Empty_Statement0R0); 
        m.insert(Index{nt:NT::Empty_Statement, alt:0, pos:1}, Label::Empty_Statement0R1); 
        m.insert(Index{nt:NT::Expression, alt:0, pos:0}, Label::Expression0R0); 
        m.insert(Index{nt:NT::Expression, alt:0, pos:1}, Label::Expression0R1); 
        m.insert(Index{nt:NT::Expression, alt:1, pos:0}, Label::Expression1R0); 
        m.insert(Index{nt:NT::Expression, alt:1, pos:1}, Label::Expression1R1); 
        m.insert(Index{nt:NT::Expression, alt:2, pos:0}, Label::Expression2R0); 
        m.insert(Index{nt:NT::Expression, alt:2, pos:1}, Label::Expression2R1); 
        m.insert(Index{nt:NT::Expression_Statement, alt:0, pos:0}, Label::Expression_Statement0R0); 
        m.insert(Index{nt:NT::Expression_Statement, alt:0, pos:1}, Label::Expression_Statement0R1); 
        m.insert(Index{nt:NT::Expression_Statement, alt:0, pos:2}, Label::Expression_Statement0R2); 
        m.insert(Index{nt:NT::Expression_Statement, alt:1, pos:0}, Label::Expression_Statement1R0); 
        m.insert(Index{nt:NT::Expression_Statement, alt:1, pos:1}, Label::Expression_Statement1R1); 
        m.insert(Index{nt:NT::For, alt:0, pos:0}, Label::For0R0); 
        m.insert(Index{nt:NT::For, alt:0, pos:1}, Label::For0R1); 
        m.insert(Index{nt:NT::For, alt:0, pos:2}, Label::For0R2); 
        m.insert(Index{nt:NT::For, alt:0, pos:3}, Label::For0R3); 
        m.insert(Index{nt:NT::For, alt:0, pos:4}, Label::For0R4); 
        m.insert(Index{nt:NT::For, alt:0, pos:5}, Label::For0R5); 
        m.insert(Index{nt:NT::For, alt:0, pos:6}, Label::For0R6); 
        m.insert(Index{nt:NT::For, alt:0, pos:7}, Label::For0R7); 
        m.insert(Index{nt:NT::For, alt:1, pos:0}, Label::For1R0); 
        m.insert(Index{nt:NT::For, alt:1, pos:1}, Label::For1R1); 
        m.insert(Index{nt:NT::For, alt:1, pos:2}, Label::For1R2); 
        m.insert(Index{nt:NT::For, alt:1, pos:3}, Label::For1R3); 
        m.insert(Index{nt:NT::For, alt:1, pos:4}, Label::For1R4); 
        m.insert(Index{nt:NT::For, alt:1, pos:5}, Label::For1R5); 
        m.insert(Index{nt:NT::For, alt:1, pos:6}, Label::For1R6); 
        m.insert(Index{nt:NT::Function_Argument, alt:0, pos:0}, Label::Function_Argument0R0); 
        m.insert(Index{nt:NT::Function_Argument, alt:0, pos:1}, Label::Function_Argument0R1); 
        m.insert(Index{nt:NT::Function_Argument, alt:0, pos:2}, Label::Function_Argument0R2); 
        m.insert(Index{nt:NT::Function_Argument, alt:0, pos:3}, Label::Function_Argument0R3); 
        m.insert(Index{nt:NT::Function_Argument_List, alt:0, pos:0}, Label::Function_Argument_List0R0); 
        m.insert(Index{nt:NT::Function_Argument_List, alt:0, pos:1}, Label::Function_Argument_List0R1); 
        m.insert(Index{nt:NT::Function_Argument_List, alt:1, pos:0}, Label::Function_Argument_List1R0); 
        m.insert(Index{nt:NT::Function_Argument_List, alt:1, pos:1}, Label::Function_Argument_List1R1); 
        m.insert(Index{nt:NT::Function_Argument_List_Body, alt:0, pos:0}, Label::Function_Argument_List_Body0R0); 
        m.insert(Index{nt:NT::Function_Argument_List_Body, alt:0, pos:1}, Label::Function_Argument_List_Body0R1); 
        m.insert(Index{nt:NT::Function_Argument_List_Body, alt:0, pos:2}, Label::Function_Argument_List_Body0R2); 
        m.insert(Index{nt:NT::Function_Argument_List_Body, alt:1, pos:0}, Label::Function_Argument_List_Body1R0); 
        m.insert(Index{nt:NT::Function_Argument_List_Body, alt:1, pos:1}, Label::Function_Argument_List_Body1R1); 
        m.insert(Index{nt:NT::Function_Argument_List_Body, alt:1, pos:2}, Label::Function_Argument_List_Body1R2); 
        m.insert(Index{nt:NT::Function_Argument_List_Body, alt:2, pos:0}, Label::Function_Argument_List_Body2R0); 
        m.insert(Index{nt:NT::Function_Argument_List_Body, alt:2, pos:1}, Label::Function_Argument_List_Body2R1); 
        m.insert(Index{nt:NT::Function_Argument_List_Body, alt:2, pos:2}, Label::Function_Argument_List_Body2R2); 
        m.insert(Index{nt:NT::Function_Argument_List_Body, alt:2, pos:3}, Label::Function_Argument_List_Body2R3); 
        m.insert(Index{nt:NT::Function_Statement, alt:0, pos:0}, Label::Function_Statement0R0); 
        m.insert(Index{nt:NT::Function_Statement, alt:0, pos:1}, Label::Function_Statement0R1); 
        m.insert(Index{nt:NT::Function_Statement, alt:0, pos:2}, Label::Function_Statement0R2); 
        m.insert(Index{nt:NT::Function_Statement, alt:0, pos:3}, Label::Function_Statement0R3); 
        m.insert(Index{nt:NT::Function_Statement, alt:0, pos:4}, Label::Function_Statement0R4); 
        m.insert(Index{nt:NT::Function_Statement, alt:0, pos:5}, Label::Function_Statement0R5); 
        m.insert(Index{nt:NT::Function_Statement, alt:0, pos:6}, Label::Function_Statement0R6); 
        m.insert(Index{nt:NT::Function_Statement, alt:0, pos:7}, Label::Function_Statement0R7); 
        m.insert(Index{nt:NT::Function_Statement, alt:1, pos:0}, Label::Function_Statement1R0); 
        m.insert(Index{nt:NT::Function_Statement, alt:1, pos:1}, Label::Function_Statement1R1); 
        m.insert(Index{nt:NT::Function_Statement, alt:1, pos:2}, Label::Function_Statement1R2); 
        m.insert(Index{nt:NT::Function_Statement, alt:1, pos:3}, Label::Function_Statement1R3); 
        m.insert(Index{nt:NT::Function_Statement, alt:1, pos:4}, Label::Function_Statement1R4); 
        m.insert(Index{nt:NT::Function_Statement, alt:1, pos:5}, Label::Function_Statement1R5); 
        m.insert(Index{nt:NT::Function_Statement, alt:1, pos:6}, Label::Function_Statement1R6); 
        m.insert(Index{nt:NT::GoGLL, alt:0, pos:0}, Label::GoGLL0R0); 
        m.insert(Index{nt:NT::GoGLL, alt:0, pos:1}, Label::GoGLL0R1); 
        m.insert(Index{nt:NT::Identifier_Expression, alt:0, pos:0}, Label::Identifier_Expression0R0); 
        m.insert(Index{nt:NT::Identifier_Expression, alt:0, pos:1}, Label::Identifier_Expression0R1); 
        m.insert(Index{nt:NT::IncDec_Expression, alt:0, pos:0}, Label::IncDec_Expression0R0); 
        m.insert(Index{nt:NT::IncDec_Expression, alt:0, pos:1}, Label::IncDec_Expression0R1); 
        m.insert(Index{nt:NT::IncDec_Expression, alt:0, pos:2}, Label::IncDec_Expression0R2); 
        m.insert(Index{nt:NT::IncDec_Expression, alt:1, pos:0}, Label::IncDec_Expression1R0); 
        m.insert(Index{nt:NT::IncDec_Expression, alt:1, pos:1}, Label::IncDec_Expression1R1); 
        m.insert(Index{nt:NT::IncDec_Expression, alt:1, pos:2}, Label::IncDec_Expression1R2); 
        m.insert(Index{nt:NT::Literal_Expression, alt:0, pos:0}, Label::Literal_Expression0R0); 
        m.insert(Index{nt:NT::Literal_Expression, alt:0, pos:1}, Label::Literal_Expression0R1); 
        m.insert(Index{nt:NT::Literal_Expression, alt:1, pos:0}, Label::Literal_Expression1R0); 
        m.insert(Index{nt:NT::Literal_Expression, alt:1, pos:1}, Label::Literal_Expression1R1); 
        m.insert(Index{nt:NT::Literal_Expression, alt:2, pos:0}, Label::Literal_Expression2R0); 
        m.insert(Index{nt:NT::Literal_Expression, alt:2, pos:1}, Label::Literal_Expression2R1); 
        m.insert(Index{nt:NT::Return_Statement, alt:0, pos:0}, Label::Return_Statement0R0); 
        m.insert(Index{nt:NT::Return_Statement, alt:0, pos:1}, Label::Return_Statement0R1); 
        m.insert(Index{nt:NT::Return_Statement, alt:0, pos:2}, Label::Return_Statement0R2); 
        m.insert(Index{nt:NT::Return_Statement, alt:0, pos:3}, Label::Return_Statement0R3); 
        m.insert(Index{nt:NT::Simple_Statement, alt:0, pos:0}, Label::Simple_Statement0R0); 
        m.insert(Index{nt:NT::Simple_Statement, alt:0, pos:1}, Label::Simple_Statement0R1); 
        m.insert(Index{nt:NT::Simple_Statement, alt:1, pos:0}, Label::Simple_Statement1R0); 
        m.insert(Index{nt:NT::Simple_Statement, alt:1, pos:1}, Label::Simple_Statement1R1); 
        m.insert(Index{nt:NT::Simple_Statement, alt:2, pos:0}, Label::Simple_Statement2R0); 
        m.insert(Index{nt:NT::Simple_Statement, alt:2, pos:1}, Label::Simple_Statement2R1); 
        m.insert(Index{nt:NT::Simple_Statement, alt:3, pos:0}, Label::Simple_Statement3R0); 
        m.insert(Index{nt:NT::Simple_Statement, alt:3, pos:1}, Label::Simple_Statement3R1); 
        m.insert(Index{nt:NT::Statement, alt:0, pos:0}, Label::Statement0R0); 
        m.insert(Index{nt:NT::Statement, alt:0, pos:1}, Label::Statement0R1); 
        m.insert(Index{nt:NT::Statement, alt:1, pos:0}, Label::Statement1R0); 
        m.insert(Index{nt:NT::Statement, alt:1, pos:1}, Label::Statement1R1); 
        m.insert(Index{nt:NT::Statement, alt:2, pos:0}, Label::Statement2R0); 
        m.insert(Index{nt:NT::Statement, alt:2, pos:1}, Label::Statement2R1); 
        m.insert(Index{nt:NT::Statement, alt:3, pos:0}, Label::Statement3R0); 
        m.insert(Index{nt:NT::Statement, alt:3, pos:1}, Label::Statement3R1); 
        m.insert(Index{nt:NT::Statement, alt:4, pos:0}, Label::Statement4R0); 
        m.insert(Index{nt:NT::Statement, alt:4, pos:1}, Label::Statement4R1); 
        m.insert(Index{nt:NT::Statement, alt:5, pos:0}, Label::Statement5R0); 
        m.insert(Index{nt:NT::Statement, alt:5, pos:1}, Label::Statement5R1); 
        m.insert(Index{nt:NT::Statement_List, alt:0, pos:0}, Label::Statement_List0R0); 
        m.insert(Index{nt:NT::Statement_List, alt:0, pos:1}, Label::Statement_List0R1); 
        m.insert(Index{nt:NT::Statement_List, alt:1, pos:0}, Label::Statement_List1R0); 
        m.insert(Index{nt:NT::Statement_List, alt:1, pos:1}, Label::Statement_List1R1); 
        m.insert(Index{nt:NT::Statement_List, alt:1, pos:2}, Label::Statement_List1R2); 
        m
    };

    static ref SLOTS: HashMap<Label, Slot> = {
        let mut m = HashMap::new(); 
        // Assignment_Statement : ∙identifier = Expression ; 
        m.insert(Label::Assignment_Statement0R0, 
            Slot{
                nt: NT::Assignment_Statement,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Assignment_Statement0R0,
            });
        // Assignment_Statement : identifier ∙= Expression ; 
        m.insert(Label::Assignment_Statement0R1, 
            Slot{
                nt: NT::Assignment_Statement,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Assignment_Statement0R1,
            });
        // Assignment_Statement : identifier = ∙Expression ; 
        m.insert(Label::Assignment_Statement0R2, 
            Slot{
                nt: NT::Assignment_Statement,
                alt: 0,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Assignment_Statement0R2,
            });
        // Assignment_Statement : identifier = Expression ∙; 
        m.insert(Label::Assignment_Statement0R3, 
            Slot{
                nt: NT::Assignment_Statement,
                alt: 0,
                pos: 3,
                symbols: vec![ 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Assignment_Statement0R3,
            });
        // Assignment_Statement : identifier = Expression ; ∙
        m.insert(Label::Assignment_Statement0R4, 
            Slot{
                nt: NT::Assignment_Statement,
                alt: 0,
                pos: 4,
                symbols: vec![ 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Assignment_Statement0R4,
            });
        // Compound_Statement : ∙{ } 
        m.insert(Label::Compound_Statement0R0, 
            Slot{
                nt: NT::Compound_Statement,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T17), 
                    Symbol::T(T::T18), 
                ],
                label: Label::Compound_Statement0R0,
            });
        // Compound_Statement : { ∙} 
        m.insert(Label::Compound_Statement0R1, 
            Slot{
                nt: NT::Compound_Statement,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T17), 
                    Symbol::T(T::T18), 
                ],
                label: Label::Compound_Statement0R1,
            });
        // Compound_Statement : { } ∙
        m.insert(Label::Compound_Statement0R2, 
            Slot{
                nt: NT::Compound_Statement,
                alt: 0,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T17), 
                    Symbol::T(T::T18), 
                ],
                label: Label::Compound_Statement0R2,
            });
        // Compound_Statement : ∙{ Statement_List } 
        m.insert(Label::Compound_Statement1R0, 
            Slot{
                nt: NT::Compound_Statement,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T17), 
                    Symbol::NT(NT::Statement_List), 
                    Symbol::T(T::T18), 
                ],
                label: Label::Compound_Statement1R0,
            });
        // Compound_Statement : { ∙Statement_List } 
        m.insert(Label::Compound_Statement1R1, 
            Slot{
                nt: NT::Compound_Statement,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T17), 
                    Symbol::NT(NT::Statement_List), 
                    Symbol::T(T::T18), 
                ],
                label: Label::Compound_Statement1R1,
            });
        // Compound_Statement : { Statement_List ∙} 
        m.insert(Label::Compound_Statement1R2, 
            Slot{
                nt: NT::Compound_Statement,
                alt: 1,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T17), 
                    Symbol::NT(NT::Statement_List), 
                    Symbol::T(T::T18), 
                ],
                label: Label::Compound_Statement1R2,
            });
        // Compound_Statement : { Statement_List } ∙
        m.insert(Label::Compound_Statement1R3, 
            Slot{
                nt: NT::Compound_Statement,
                alt: 1,
                pos: 3,
                symbols: vec![ 
                    Symbol::T(T::T17), 
                    Symbol::NT(NT::Statement_List), 
                    Symbol::T(T::T18), 
                ],
                label: Label::Compound_Statement1R3,
            });
        // Declaration_Statement : ∙let identifier : identifier = Expression ; 
        m.insert(Label::Declaration_Statement0R0, 
            Slot{
                nt: NT::Declaration_Statement,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T14), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T4), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Declaration_Statement0R0,
            });
        // Declaration_Statement : let ∙identifier : identifier = Expression ; 
        m.insert(Label::Declaration_Statement0R1, 
            Slot{
                nt: NT::Declaration_Statement,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T14), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T4), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Declaration_Statement0R1,
            });
        // Declaration_Statement : let identifier ∙: identifier = Expression ; 
        m.insert(Label::Declaration_Statement0R2, 
            Slot{
                nt: NT::Declaration_Statement,
                alt: 0,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T14), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T4), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Declaration_Statement0R2,
            });
        // Declaration_Statement : let identifier : ∙identifier = Expression ; 
        m.insert(Label::Declaration_Statement0R3, 
            Slot{
                nt: NT::Declaration_Statement,
                alt: 0,
                pos: 3,
                symbols: vec![ 
                    Symbol::T(T::T14), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T4), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Declaration_Statement0R3,
            });
        // Declaration_Statement : let identifier : identifier ∙= Expression ; 
        m.insert(Label::Declaration_Statement0R4, 
            Slot{
                nt: NT::Declaration_Statement,
                alt: 0,
                pos: 4,
                symbols: vec![ 
                    Symbol::T(T::T14), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T4), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Declaration_Statement0R4,
            });
        // Declaration_Statement : let identifier : identifier = ∙Expression ; 
        m.insert(Label::Declaration_Statement0R5, 
            Slot{
                nt: NT::Declaration_Statement,
                alt: 0,
                pos: 5,
                symbols: vec![ 
                    Symbol::T(T::T14), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T4), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Declaration_Statement0R5,
            });
        // Declaration_Statement : let identifier : identifier = Expression ∙; 
        m.insert(Label::Declaration_Statement0R6, 
            Slot{
                nt: NT::Declaration_Statement,
                alt: 0,
                pos: 6,
                symbols: vec![ 
                    Symbol::T(T::T14), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T4), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Declaration_Statement0R6,
            });
        // Declaration_Statement : let identifier : identifier = Expression ; ∙
        m.insert(Label::Declaration_Statement0R7, 
            Slot{
                nt: NT::Declaration_Statement,
                alt: 0,
                pos: 7,
                symbols: vec![ 
                    Symbol::T(T::T14), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T4), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Declaration_Statement0R7,
            });
        // Declaration_Statement : ∙let config identifier : identifier = Expression ; 
        m.insert(Label::Declaration_Statement1R0, 
            Slot{
                nt: NT::Declaration_Statement,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T14), 
                    Symbol::T(T::T8), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T4), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Declaration_Statement1R0,
            });
        // Declaration_Statement : let ∙config identifier : identifier = Expression ; 
        m.insert(Label::Declaration_Statement1R1, 
            Slot{
                nt: NT::Declaration_Statement,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T14), 
                    Symbol::T(T::T8), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T4), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Declaration_Statement1R1,
            });
        // Declaration_Statement : let config ∙identifier : identifier = Expression ; 
        m.insert(Label::Declaration_Statement1R2, 
            Slot{
                nt: NT::Declaration_Statement,
                alt: 1,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T14), 
                    Symbol::T(T::T8), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T4), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Declaration_Statement1R2,
            });
        // Declaration_Statement : let config identifier ∙: identifier = Expression ; 
        m.insert(Label::Declaration_Statement1R3, 
            Slot{
                nt: NT::Declaration_Statement,
                alt: 1,
                pos: 3,
                symbols: vec![ 
                    Symbol::T(T::T14), 
                    Symbol::T(T::T8), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T4), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Declaration_Statement1R3,
            });
        // Declaration_Statement : let config identifier : ∙identifier = Expression ; 
        m.insert(Label::Declaration_Statement1R4, 
            Slot{
                nt: NT::Declaration_Statement,
                alt: 1,
                pos: 4,
                symbols: vec![ 
                    Symbol::T(T::T14), 
                    Symbol::T(T::T8), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T4), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Declaration_Statement1R4,
            });
        // Declaration_Statement : let config identifier : identifier ∙= Expression ; 
        m.insert(Label::Declaration_Statement1R5, 
            Slot{
                nt: NT::Declaration_Statement,
                alt: 1,
                pos: 5,
                symbols: vec![ 
                    Symbol::T(T::T14), 
                    Symbol::T(T::T8), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T4), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Declaration_Statement1R5,
            });
        // Declaration_Statement : let config identifier : identifier = ∙Expression ; 
        m.insert(Label::Declaration_Statement1R6, 
            Slot{
                nt: NT::Declaration_Statement,
                alt: 1,
                pos: 6,
                symbols: vec![ 
                    Symbol::T(T::T14), 
                    Symbol::T(T::T8), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T4), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Declaration_Statement1R6,
            });
        // Declaration_Statement : let config identifier : identifier = Expression ∙; 
        m.insert(Label::Declaration_Statement1R7, 
            Slot{
                nt: NT::Declaration_Statement,
                alt: 1,
                pos: 7,
                symbols: vec![ 
                    Symbol::T(T::T14), 
                    Symbol::T(T::T8), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T4), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Declaration_Statement1R7,
            });
        // Declaration_Statement : let config identifier : identifier = Expression ; ∙
        m.insert(Label::Declaration_Statement1R8, 
            Slot{
                nt: NT::Declaration_Statement,
                alt: 1,
                pos: 8,
                symbols: vec![ 
                    Symbol::T(T::T14), 
                    Symbol::T(T::T8), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T4), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T6), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Declaration_Statement1R8,
            });
        // Empty_Statement : ∙; 
        m.insert(Label::Empty_Statement0R0, 
            Slot{
                nt: NT::Empty_Statement,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T5), 
                ],
                label: Label::Empty_Statement0R0,
            });
        // Empty_Statement : ; ∙
        m.insert(Label::Empty_Statement0R1, 
            Slot{
                nt: NT::Empty_Statement,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T5), 
                ],
                label: Label::Empty_Statement0R1,
            });
        // Expression : ∙IncDec_Expression 
        m.insert(Label::Expression0R0, 
            Slot{
                nt: NT::Expression,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::IncDec_Expression), 
                ],
                label: Label::Expression0R0,
            });
        // Expression : IncDec_Expression ∙
        m.insert(Label::Expression0R1, 
            Slot{
                nt: NT::Expression,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::IncDec_Expression), 
                ],
                label: Label::Expression0R1,
            });
        // Expression : ∙Literal_Expression 
        m.insert(Label::Expression1R0, 
            Slot{
                nt: NT::Expression,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Literal_Expression), 
                ],
                label: Label::Expression1R0,
            });
        // Expression : Literal_Expression ∙
        m.insert(Label::Expression1R1, 
            Slot{
                nt: NT::Expression,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Literal_Expression), 
                ],
                label: Label::Expression1R1,
            });
        // Expression : ∙Identifier_Expression 
        m.insert(Label::Expression2R0, 
            Slot{
                nt: NT::Expression,
                alt: 2,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Identifier_Expression), 
                ],
                label: Label::Expression2R0,
            });
        // Expression : Identifier_Expression ∙
        m.insert(Label::Expression2R1, 
            Slot{
                nt: NT::Expression,
                alt: 2,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Identifier_Expression), 
                ],
                label: Label::Expression2R1,
            });
        // Expression_Statement : ∙Expression ; 
        m.insert(Label::Expression_Statement0R0, 
            Slot{
                nt: NT::Expression_Statement,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Expression_Statement0R0,
            });
        // Expression_Statement : Expression ∙; 
        m.insert(Label::Expression_Statement0R1, 
            Slot{
                nt: NT::Expression_Statement,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Expression_Statement0R1,
            });
        // Expression_Statement : Expression ; ∙
        m.insert(Label::Expression_Statement0R2, 
            Slot{
                nt: NT::Expression_Statement,
                alt: 0,
                pos: 2,
                symbols: vec![ 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Expression_Statement0R2,
            });
        // Expression_Statement : ∙; 
        m.insert(Label::Expression_Statement1R0, 
            Slot{
                nt: NT::Expression_Statement,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T5), 
                ],
                label: Label::Expression_Statement1R0,
            });
        // Expression_Statement : ; ∙
        m.insert(Label::Expression_Statement1R1, 
            Slot{
                nt: NT::Expression_Statement,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T5), 
                ],
                label: Label::Expression_Statement1R1,
            });
        // For : ∙for ( Simple_Statement Expression_Statement Expression ) Statement 
        m.insert(Label::For0R0, 
            Slot{
                nt: NT::For,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T10), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Simple_Statement), 
                    Symbol::NT(NT::Expression_Statement), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T1), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::For0R0,
            });
        // For : for ∙( Simple_Statement Expression_Statement Expression ) Statement 
        m.insert(Label::For0R1, 
            Slot{
                nt: NT::For,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T10), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Simple_Statement), 
                    Symbol::NT(NT::Expression_Statement), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T1), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::For0R1,
            });
        // For : for ( ∙Simple_Statement Expression_Statement Expression ) Statement 
        m.insert(Label::For0R2, 
            Slot{
                nt: NT::For,
                alt: 0,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T10), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Simple_Statement), 
                    Symbol::NT(NT::Expression_Statement), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T1), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::For0R2,
            });
        // For : for ( Simple_Statement ∙Expression_Statement Expression ) Statement 
        m.insert(Label::For0R3, 
            Slot{
                nt: NT::For,
                alt: 0,
                pos: 3,
                symbols: vec![ 
                    Symbol::T(T::T10), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Simple_Statement), 
                    Symbol::NT(NT::Expression_Statement), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T1), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::For0R3,
            });
        // For : for ( Simple_Statement Expression_Statement ∙Expression ) Statement 
        m.insert(Label::For0R4, 
            Slot{
                nt: NT::For,
                alt: 0,
                pos: 4,
                symbols: vec![ 
                    Symbol::T(T::T10), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Simple_Statement), 
                    Symbol::NT(NT::Expression_Statement), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T1), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::For0R4,
            });
        // For : for ( Simple_Statement Expression_Statement Expression ∙) Statement 
        m.insert(Label::For0R5, 
            Slot{
                nt: NT::For,
                alt: 0,
                pos: 5,
                symbols: vec![ 
                    Symbol::T(T::T10), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Simple_Statement), 
                    Symbol::NT(NT::Expression_Statement), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T1), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::For0R5,
            });
        // For : for ( Simple_Statement Expression_Statement Expression ) ∙Statement 
        m.insert(Label::For0R6, 
            Slot{
                nt: NT::For,
                alt: 0,
                pos: 6,
                symbols: vec![ 
                    Symbol::T(T::T10), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Simple_Statement), 
                    Symbol::NT(NT::Expression_Statement), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T1), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::For0R6,
            });
        // For : for ( Simple_Statement Expression_Statement Expression ) Statement ∙
        m.insert(Label::For0R7, 
            Slot{
                nt: NT::For,
                alt: 0,
                pos: 7,
                symbols: vec![ 
                    Symbol::T(T::T10), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Simple_Statement), 
                    Symbol::NT(NT::Expression_Statement), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T1), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::For0R7,
            });
        // For : ∙for ( Simple_Statement Expression_Statement ) Statement 
        m.insert(Label::For1R0, 
            Slot{
                nt: NT::For,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T10), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Simple_Statement), 
                    Symbol::NT(NT::Expression_Statement), 
                    Symbol::T(T::T1), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::For1R0,
            });
        // For : for ∙( Simple_Statement Expression_Statement ) Statement 
        m.insert(Label::For1R1, 
            Slot{
                nt: NT::For,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T10), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Simple_Statement), 
                    Symbol::NT(NT::Expression_Statement), 
                    Symbol::T(T::T1), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::For1R1,
            });
        // For : for ( ∙Simple_Statement Expression_Statement ) Statement 
        m.insert(Label::For1R2, 
            Slot{
                nt: NT::For,
                alt: 1,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T10), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Simple_Statement), 
                    Symbol::NT(NT::Expression_Statement), 
                    Symbol::T(T::T1), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::For1R2,
            });
        // For : for ( Simple_Statement ∙Expression_Statement ) Statement 
        m.insert(Label::For1R3, 
            Slot{
                nt: NT::For,
                alt: 1,
                pos: 3,
                symbols: vec![ 
                    Symbol::T(T::T10), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Simple_Statement), 
                    Symbol::NT(NT::Expression_Statement), 
                    Symbol::T(T::T1), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::For1R3,
            });
        // For : for ( Simple_Statement Expression_Statement ∙) Statement 
        m.insert(Label::For1R4, 
            Slot{
                nt: NT::For,
                alt: 1,
                pos: 4,
                symbols: vec![ 
                    Symbol::T(T::T10), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Simple_Statement), 
                    Symbol::NT(NT::Expression_Statement), 
                    Symbol::T(T::T1), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::For1R4,
            });
        // For : for ( Simple_Statement Expression_Statement ) ∙Statement 
        m.insert(Label::For1R5, 
            Slot{
                nt: NT::For,
                alt: 1,
                pos: 5,
                symbols: vec![ 
                    Symbol::T(T::T10), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Simple_Statement), 
                    Symbol::NT(NT::Expression_Statement), 
                    Symbol::T(T::T1), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::For1R5,
            });
        // For : for ( Simple_Statement Expression_Statement ) Statement ∙
        m.insert(Label::For1R6, 
            Slot{
                nt: NT::For,
                alt: 1,
                pos: 6,
                symbols: vec![ 
                    Symbol::T(T::T10), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Simple_Statement), 
                    Symbol::NT(NT::Expression_Statement), 
                    Symbol::T(T::T1), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::For1R6,
            });
        // Function_Argument : ∙identifier : identifier 
        m.insert(Label::Function_Argument0R0, 
            Slot{
                nt: NT::Function_Argument,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T4), 
                    Symbol::T(T::T12), 
                ],
                label: Label::Function_Argument0R0,
            });
        // Function_Argument : identifier ∙: identifier 
        m.insert(Label::Function_Argument0R1, 
            Slot{
                nt: NT::Function_Argument,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T4), 
                    Symbol::T(T::T12), 
                ],
                label: Label::Function_Argument0R1,
            });
        // Function_Argument : identifier : ∙identifier 
        m.insert(Label::Function_Argument0R2, 
            Slot{
                nt: NT::Function_Argument,
                alt: 0,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T4), 
                    Symbol::T(T::T12), 
                ],
                label: Label::Function_Argument0R2,
            });
        // Function_Argument : identifier : identifier ∙
        m.insert(Label::Function_Argument0R3, 
            Slot{
                nt: NT::Function_Argument,
                alt: 0,
                pos: 3,
                symbols: vec![ 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T4), 
                    Symbol::T(T::T12), 
                ],
                label: Label::Function_Argument0R3,
            });
        // Function_Argument_List : ∙Function_Argument 
        m.insert(Label::Function_Argument_List0R0, 
            Slot{
                nt: NT::Function_Argument_List,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Function_Argument), 
                ],
                label: Label::Function_Argument_List0R0,
            });
        // Function_Argument_List : Function_Argument ∙
        m.insert(Label::Function_Argument_List0R1, 
            Slot{
                nt: NT::Function_Argument_List,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Function_Argument), 
                ],
                label: Label::Function_Argument_List0R1,
            });
        // Function_Argument_List : ∙Function_Argument_List_Body 
        m.insert(Label::Function_Argument_List1R0, 
            Slot{
                nt: NT::Function_Argument_List,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Function_Argument_List_Body), 
                ],
                label: Label::Function_Argument_List1R0,
            });
        // Function_Argument_List : Function_Argument_List_Body ∙
        m.insert(Label::Function_Argument_List1R1, 
            Slot{
                nt: NT::Function_Argument_List,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Function_Argument_List_Body), 
                ],
                label: Label::Function_Argument_List1R1,
            });
        // Function_Argument_List_Body : ∙Function_Argument ; 
        m.insert(Label::Function_Argument_List_Body0R0, 
            Slot{
                nt: NT::Function_Argument_List_Body,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Function_Argument), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Function_Argument_List_Body0R0,
            });
        // Function_Argument_List_Body : Function_Argument ∙; 
        m.insert(Label::Function_Argument_List_Body0R1, 
            Slot{
                nt: NT::Function_Argument_List_Body,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Function_Argument), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Function_Argument_List_Body0R1,
            });
        // Function_Argument_List_Body : Function_Argument ; ∙
        m.insert(Label::Function_Argument_List_Body0R2, 
            Slot{
                nt: NT::Function_Argument_List_Body,
                alt: 0,
                pos: 2,
                symbols: vec![ 
                    Symbol::NT(NT::Function_Argument), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Function_Argument_List_Body0R2,
            });
        // Function_Argument_List_Body : ∙Function_Argument_List_Body Function_Argument 
        m.insert(Label::Function_Argument_List_Body1R0, 
            Slot{
                nt: NT::Function_Argument_List_Body,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Function_Argument_List_Body), 
                    Symbol::NT(NT::Function_Argument), 
                ],
                label: Label::Function_Argument_List_Body1R0,
            });
        // Function_Argument_List_Body : Function_Argument_List_Body ∙Function_Argument 
        m.insert(Label::Function_Argument_List_Body1R1, 
            Slot{
                nt: NT::Function_Argument_List_Body,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Function_Argument_List_Body), 
                    Symbol::NT(NT::Function_Argument), 
                ],
                label: Label::Function_Argument_List_Body1R1,
            });
        // Function_Argument_List_Body : Function_Argument_List_Body Function_Argument ∙
        m.insert(Label::Function_Argument_List_Body1R2, 
            Slot{
                nt: NT::Function_Argument_List_Body,
                alt: 1,
                pos: 2,
                symbols: vec![ 
                    Symbol::NT(NT::Function_Argument_List_Body), 
                    Symbol::NT(NT::Function_Argument), 
                ],
                label: Label::Function_Argument_List_Body1R2,
            });
        // Function_Argument_List_Body : ∙Function_Argument_List_Body Function_Argument ; 
        m.insert(Label::Function_Argument_List_Body2R0, 
            Slot{
                nt: NT::Function_Argument_List_Body,
                alt: 2,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Function_Argument_List_Body), 
                    Symbol::NT(NT::Function_Argument), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Function_Argument_List_Body2R0,
            });
        // Function_Argument_List_Body : Function_Argument_List_Body ∙Function_Argument ; 
        m.insert(Label::Function_Argument_List_Body2R1, 
            Slot{
                nt: NT::Function_Argument_List_Body,
                alt: 2,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Function_Argument_List_Body), 
                    Symbol::NT(NT::Function_Argument), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Function_Argument_List_Body2R1,
            });
        // Function_Argument_List_Body : Function_Argument_List_Body Function_Argument ∙; 
        m.insert(Label::Function_Argument_List_Body2R2, 
            Slot{
                nt: NT::Function_Argument_List_Body,
                alt: 2,
                pos: 2,
                symbols: vec![ 
                    Symbol::NT(NT::Function_Argument_List_Body), 
                    Symbol::NT(NT::Function_Argument), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Function_Argument_List_Body2R2,
            });
        // Function_Argument_List_Body : Function_Argument_List_Body Function_Argument ; ∙
        m.insert(Label::Function_Argument_List_Body2R3, 
            Slot{
                nt: NT::Function_Argument_List_Body,
                alt: 2,
                pos: 3,
                symbols: vec![ 
                    Symbol::NT(NT::Function_Argument_List_Body), 
                    Symbol::NT(NT::Function_Argument), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Function_Argument_List_Body2R3,
            });
        // Function_Statement : ∙func identifier ( Function_Argument_List ) identifier Statement 
        m.insert(Label::Function_Statement0R0, 
            Slot{
                nt: NT::Function_Statement,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T11), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Function_Argument_List), 
                    Symbol::T(T::T1), 
                    Symbol::T(T::T12), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::Function_Statement0R0,
            });
        // Function_Statement : func ∙identifier ( Function_Argument_List ) identifier Statement 
        m.insert(Label::Function_Statement0R1, 
            Slot{
                nt: NT::Function_Statement,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T11), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Function_Argument_List), 
                    Symbol::T(T::T1), 
                    Symbol::T(T::T12), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::Function_Statement0R1,
            });
        // Function_Statement : func identifier ∙( Function_Argument_List ) identifier Statement 
        m.insert(Label::Function_Statement0R2, 
            Slot{
                nt: NT::Function_Statement,
                alt: 0,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T11), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Function_Argument_List), 
                    Symbol::T(T::T1), 
                    Symbol::T(T::T12), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::Function_Statement0R2,
            });
        // Function_Statement : func identifier ( ∙Function_Argument_List ) identifier Statement 
        m.insert(Label::Function_Statement0R3, 
            Slot{
                nt: NT::Function_Statement,
                alt: 0,
                pos: 3,
                symbols: vec![ 
                    Symbol::T(T::T11), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Function_Argument_List), 
                    Symbol::T(T::T1), 
                    Symbol::T(T::T12), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::Function_Statement0R3,
            });
        // Function_Statement : func identifier ( Function_Argument_List ∙) identifier Statement 
        m.insert(Label::Function_Statement0R4, 
            Slot{
                nt: NT::Function_Statement,
                alt: 0,
                pos: 4,
                symbols: vec![ 
                    Symbol::T(T::T11), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Function_Argument_List), 
                    Symbol::T(T::T1), 
                    Symbol::T(T::T12), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::Function_Statement0R4,
            });
        // Function_Statement : func identifier ( Function_Argument_List ) ∙identifier Statement 
        m.insert(Label::Function_Statement0R5, 
            Slot{
                nt: NT::Function_Statement,
                alt: 0,
                pos: 5,
                symbols: vec![ 
                    Symbol::T(T::T11), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Function_Argument_List), 
                    Symbol::T(T::T1), 
                    Symbol::T(T::T12), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::Function_Statement0R5,
            });
        // Function_Statement : func identifier ( Function_Argument_List ) identifier ∙Statement 
        m.insert(Label::Function_Statement0R6, 
            Slot{
                nt: NT::Function_Statement,
                alt: 0,
                pos: 6,
                symbols: vec![ 
                    Symbol::T(T::T11), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Function_Argument_List), 
                    Symbol::T(T::T1), 
                    Symbol::T(T::T12), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::Function_Statement0R6,
            });
        // Function_Statement : func identifier ( Function_Argument_List ) identifier Statement ∙
        m.insert(Label::Function_Statement0R7, 
            Slot{
                nt: NT::Function_Statement,
                alt: 0,
                pos: 7,
                symbols: vec![ 
                    Symbol::T(T::T11), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T0), 
                    Symbol::NT(NT::Function_Argument_List), 
                    Symbol::T(T::T1), 
                    Symbol::T(T::T12), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::Function_Statement0R7,
            });
        // Function_Statement : ∙func identifier ( ) identifier Statement 
        m.insert(Label::Function_Statement1R0, 
            Slot{
                nt: NT::Function_Statement,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T11), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T0), 
                    Symbol::T(T::T1), 
                    Symbol::T(T::T12), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::Function_Statement1R0,
            });
        // Function_Statement : func ∙identifier ( ) identifier Statement 
        m.insert(Label::Function_Statement1R1, 
            Slot{
                nt: NT::Function_Statement,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T11), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T0), 
                    Symbol::T(T::T1), 
                    Symbol::T(T::T12), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::Function_Statement1R1,
            });
        // Function_Statement : func identifier ∙( ) identifier Statement 
        m.insert(Label::Function_Statement1R2, 
            Slot{
                nt: NT::Function_Statement,
                alt: 1,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T11), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T0), 
                    Symbol::T(T::T1), 
                    Symbol::T(T::T12), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::Function_Statement1R2,
            });
        // Function_Statement : func identifier ( ∙) identifier Statement 
        m.insert(Label::Function_Statement1R3, 
            Slot{
                nt: NT::Function_Statement,
                alt: 1,
                pos: 3,
                symbols: vec![ 
                    Symbol::T(T::T11), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T0), 
                    Symbol::T(T::T1), 
                    Symbol::T(T::T12), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::Function_Statement1R3,
            });
        // Function_Statement : func identifier ( ) ∙identifier Statement 
        m.insert(Label::Function_Statement1R4, 
            Slot{
                nt: NT::Function_Statement,
                alt: 1,
                pos: 4,
                symbols: vec![ 
                    Symbol::T(T::T11), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T0), 
                    Symbol::T(T::T1), 
                    Symbol::T(T::T12), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::Function_Statement1R4,
            });
        // Function_Statement : func identifier ( ) identifier ∙Statement 
        m.insert(Label::Function_Statement1R5, 
            Slot{
                nt: NT::Function_Statement,
                alt: 1,
                pos: 5,
                symbols: vec![ 
                    Symbol::T(T::T11), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T0), 
                    Symbol::T(T::T1), 
                    Symbol::T(T::T12), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::Function_Statement1R5,
            });
        // Function_Statement : func identifier ( ) identifier Statement ∙
        m.insert(Label::Function_Statement1R6, 
            Slot{
                nt: NT::Function_Statement,
                alt: 1,
                pos: 6,
                symbols: vec![ 
                    Symbol::T(T::T11), 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T0), 
                    Symbol::T(T::T1), 
                    Symbol::T(T::T12), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::Function_Statement1R6,
            });
        // GoGLL : ∙Statement_List 
        m.insert(Label::GoGLL0R0, 
            Slot{
                nt: NT::GoGLL,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Statement_List), 
                ],
                label: Label::GoGLL0R0,
            });
        // GoGLL : Statement_List ∙
        m.insert(Label::GoGLL0R1, 
            Slot{
                nt: NT::GoGLL,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Statement_List), 
                ],
                label: Label::GoGLL0R1,
            });
        // Identifier_Expression : ∙identifier 
        m.insert(Label::Identifier_Expression0R0, 
            Slot{
                nt: NT::Identifier_Expression,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T12), 
                ],
                label: Label::Identifier_Expression0R0,
            });
        // Identifier_Expression : identifier ∙
        m.insert(Label::Identifier_Expression0R1, 
            Slot{
                nt: NT::Identifier_Expression,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T12), 
                ],
                label: Label::Identifier_Expression0R1,
            });
        // IncDec_Expression : ∙identifier ++ 
        m.insert(Label::IncDec_Expression0R0, 
            Slot{
                nt: NT::IncDec_Expression,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T2), 
                ],
                label: Label::IncDec_Expression0R0,
            });
        // IncDec_Expression : identifier ∙++ 
        m.insert(Label::IncDec_Expression0R1, 
            Slot{
                nt: NT::IncDec_Expression,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T2), 
                ],
                label: Label::IncDec_Expression0R1,
            });
        // IncDec_Expression : identifier ++ ∙
        m.insert(Label::IncDec_Expression0R2, 
            Slot{
                nt: NT::IncDec_Expression,
                alt: 0,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T2), 
                ],
                label: Label::IncDec_Expression0R2,
            });
        // IncDec_Expression : ∙identifier -- 
        m.insert(Label::IncDec_Expression1R0, 
            Slot{
                nt: NT::IncDec_Expression,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T3), 
                ],
                label: Label::IncDec_Expression1R0,
            });
        // IncDec_Expression : identifier ∙-- 
        m.insert(Label::IncDec_Expression1R1, 
            Slot{
                nt: NT::IncDec_Expression,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T3), 
                ],
                label: Label::IncDec_Expression1R1,
            });
        // IncDec_Expression : identifier -- ∙
        m.insert(Label::IncDec_Expression1R2, 
            Slot{
                nt: NT::IncDec_Expression,
                alt: 1,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T12), 
                    Symbol::T(T::T3), 
                ],
                label: Label::IncDec_Expression1R2,
            });
        // Literal_Expression : ∙integer_literal 
        m.insert(Label::Literal_Expression0R0, 
            Slot{
                nt: NT::Literal_Expression,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T13), 
                ],
                label: Label::Literal_Expression0R0,
            });
        // Literal_Expression : integer_literal ∙
        m.insert(Label::Literal_Expression0R1, 
            Slot{
                nt: NT::Literal_Expression,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T13), 
                ],
                label: Label::Literal_Expression0R1,
            });
        // Literal_Expression : ∙float_literal 
        m.insert(Label::Literal_Expression1R0, 
            Slot{
                nt: NT::Literal_Expression,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T9), 
                ],
                label: Label::Literal_Expression1R0,
            });
        // Literal_Expression : float_literal ∙
        m.insert(Label::Literal_Expression1R1, 
            Slot{
                nt: NT::Literal_Expression,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T9), 
                ],
                label: Label::Literal_Expression1R1,
            });
        // Literal_Expression : ∙string_literal 
        m.insert(Label::Literal_Expression2R0, 
            Slot{
                nt: NT::Literal_Expression,
                alt: 2,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T16), 
                ],
                label: Label::Literal_Expression2R0,
            });
        // Literal_Expression : string_literal ∙
        m.insert(Label::Literal_Expression2R1, 
            Slot{
                nt: NT::Literal_Expression,
                alt: 2,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T16), 
                ],
                label: Label::Literal_Expression2R1,
            });
        // Return_Statement : ∙return Expression ; 
        m.insert(Label::Return_Statement0R0, 
            Slot{
                nt: NT::Return_Statement,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::T(T::T15), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Return_Statement0R0,
            });
        // Return_Statement : return ∙Expression ; 
        m.insert(Label::Return_Statement0R1, 
            Slot{
                nt: NT::Return_Statement,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::T(T::T15), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Return_Statement0R1,
            });
        // Return_Statement : return Expression ∙; 
        m.insert(Label::Return_Statement0R2, 
            Slot{
                nt: NT::Return_Statement,
                alt: 0,
                pos: 2,
                symbols: vec![ 
                    Symbol::T(T::T15), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Return_Statement0R2,
            });
        // Return_Statement : return Expression ; ∙
        m.insert(Label::Return_Statement0R3, 
            Slot{
                nt: NT::Return_Statement,
                alt: 0,
                pos: 3,
                symbols: vec![ 
                    Symbol::T(T::T15), 
                    Symbol::NT(NT::Expression), 
                    Symbol::T(T::T5), 
                ],
                label: Label::Return_Statement0R3,
            });
        // Simple_Statement : ∙Declaration_Statement 
        m.insert(Label::Simple_Statement0R0, 
            Slot{
                nt: NT::Simple_Statement,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Declaration_Statement), 
                ],
                label: Label::Simple_Statement0R0,
            });
        // Simple_Statement : Declaration_Statement ∙
        m.insert(Label::Simple_Statement0R1, 
            Slot{
                nt: NT::Simple_Statement,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Declaration_Statement), 
                ],
                label: Label::Simple_Statement0R1,
            });
        // Simple_Statement : ∙Assignment_Statement 
        m.insert(Label::Simple_Statement1R0, 
            Slot{
                nt: NT::Simple_Statement,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Assignment_Statement), 
                ],
                label: Label::Simple_Statement1R0,
            });
        // Simple_Statement : Assignment_Statement ∙
        m.insert(Label::Simple_Statement1R1, 
            Slot{
                nt: NT::Simple_Statement,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Assignment_Statement), 
                ],
                label: Label::Simple_Statement1R1,
            });
        // Simple_Statement : ∙Expression_Statement 
        m.insert(Label::Simple_Statement2R0, 
            Slot{
                nt: NT::Simple_Statement,
                alt: 2,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Expression_Statement), 
                ],
                label: Label::Simple_Statement2R0,
            });
        // Simple_Statement : Expression_Statement ∙
        m.insert(Label::Simple_Statement2R1, 
            Slot{
                nt: NT::Simple_Statement,
                alt: 2,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Expression_Statement), 
                ],
                label: Label::Simple_Statement2R1,
            });
        // Simple_Statement : ∙Empty_Statement 
        m.insert(Label::Simple_Statement3R0, 
            Slot{
                nt: NT::Simple_Statement,
                alt: 3,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Empty_Statement), 
                ],
                label: Label::Simple_Statement3R0,
            });
        // Simple_Statement : Empty_Statement ∙
        m.insert(Label::Simple_Statement3R1, 
            Slot{
                nt: NT::Simple_Statement,
                alt: 3,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Empty_Statement), 
                ],
                label: Label::Simple_Statement3R1,
            });
        // Statement : ∙Empty_Statement 
        m.insert(Label::Statement0R0, 
            Slot{
                nt: NT::Statement,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Empty_Statement), 
                ],
                label: Label::Statement0R0,
            });
        // Statement : Empty_Statement ∙
        m.insert(Label::Statement0R1, 
            Slot{
                nt: NT::Statement,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Empty_Statement), 
                ],
                label: Label::Statement0R1,
            });
        // Statement : ∙Simple_Statement 
        m.insert(Label::Statement1R0, 
            Slot{
                nt: NT::Statement,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Simple_Statement), 
                ],
                label: Label::Statement1R0,
            });
        // Statement : Simple_Statement ∙
        m.insert(Label::Statement1R1, 
            Slot{
                nt: NT::Statement,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Simple_Statement), 
                ],
                label: Label::Statement1R1,
            });
        // Statement : ∙Compound_Statement 
        m.insert(Label::Statement2R0, 
            Slot{
                nt: NT::Statement,
                alt: 2,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Compound_Statement), 
                ],
                label: Label::Statement2R0,
            });
        // Statement : Compound_Statement ∙
        m.insert(Label::Statement2R1, 
            Slot{
                nt: NT::Statement,
                alt: 2,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Compound_Statement), 
                ],
                label: Label::Statement2R1,
            });
        // Statement : ∙Function_Statement 
        m.insert(Label::Statement3R0, 
            Slot{
                nt: NT::Statement,
                alt: 3,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Function_Statement), 
                ],
                label: Label::Statement3R0,
            });
        // Statement : Function_Statement ∙
        m.insert(Label::Statement3R1, 
            Slot{
                nt: NT::Statement,
                alt: 3,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Function_Statement), 
                ],
                label: Label::Statement3R1,
            });
        // Statement : ∙Return_Statement 
        m.insert(Label::Statement4R0, 
            Slot{
                nt: NT::Statement,
                alt: 4,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Return_Statement), 
                ],
                label: Label::Statement4R0,
            });
        // Statement : Return_Statement ∙
        m.insert(Label::Statement4R1, 
            Slot{
                nt: NT::Statement,
                alt: 4,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Return_Statement), 
                ],
                label: Label::Statement4R1,
            });
        // Statement : ∙For 
        m.insert(Label::Statement5R0, 
            Slot{
                nt: NT::Statement,
                alt: 5,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::For), 
                ],
                label: Label::Statement5R0,
            });
        // Statement : For ∙
        m.insert(Label::Statement5R1, 
            Slot{
                nt: NT::Statement,
                alt: 5,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::For), 
                ],
                label: Label::Statement5R1,
            });
        // Statement_List : ∙Statement 
        m.insert(Label::Statement_List0R0, 
            Slot{
                nt: NT::Statement_List,
                alt: 0,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::Statement_List0R0,
            });
        // Statement_List : Statement ∙
        m.insert(Label::Statement_List0R1, 
            Slot{
                nt: NT::Statement_List,
                alt: 0,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::Statement_List0R1,
            });
        // Statement_List : ∙Statement_List Statement 
        m.insert(Label::Statement_List1R0, 
            Slot{
                nt: NT::Statement_List,
                alt: 1,
                pos: 0,
                symbols: vec![ 
                    Symbol::NT(NT::Statement_List), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::Statement_List1R0,
            });
        // Statement_List : Statement_List ∙Statement 
        m.insert(Label::Statement_List1R1, 
            Slot{
                nt: NT::Statement_List,
                alt: 1,
                pos: 1,
                symbols: vec![ 
                    Symbol::NT(NT::Statement_List), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::Statement_List1R1,
            });
        // Statement_List : Statement_List Statement ∙
        m.insert(Label::Statement_List1R2, 
            Slot{
                nt: NT::Statement_List,
                alt: 1,
                pos: 2,
                symbols: vec![ 
                    Symbol::NT(NT::Statement_List), 
                    Symbol::NT(NT::Statement), 
                ],
                label: Label::Statement_List1R2,
            });
        m
	};
}
