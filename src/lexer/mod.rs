
//! Module lexer is generated by GoGLL. Do not edit.

use crate::token;

use std::{fs, io};
use std::rc::Rc;

type State = usize;

const NULL_STATE: State = usize::MAX ;

/**
Lexer contains both the input Vec<char> and the Vec<token::Token>
parsed from the input
*/
pub struct Lexer {
	/// i is the input vector of char
	i: Rc<Vec<char>>,

	/// tokens is the vector of tokens constructed by the lexer from I
	pub tokens: Vec<Rc<token::Token>>
}

impl Lexer {
	/**
	new_file constructs a Lexer created from the input file, fname. 

	If the input file is a markdown file new_file process treats all text outside
	code blocks as whitespace. All text inside code blocks are treated as input text.

	If the input file is a normal text file new_file treats all text in the inputfile
	as input text.
	*/
	#[allow(dead_code)]
	pub fn new_file(fname: &String) -> io::Result<Rc<Lexer>> {
		let i = Rc::new(load_file(fname)?);
		Ok(Lexer::new(i))
	}

	/**
	new constructs a Lexer from a Vec<char>. 
	
	All contents of the input are treated as input text.
	*/
	pub fn new(input: Rc<Vec<char>>) -> Rc<Lexer> {
		let mut lex = Lexer{
			i:      input.clone(),
			tokens: Vec::new(),
		};
		let mut lext = 0;
		while lext < lex.i.len() {
			while lext < lex.i.len() && lex.i[lext].is_whitespace() {
				lext += 1
			}
			if lext < lex.i.len() {
				let tok = lex.scan(lext);
				lext = tok.rext;
				if !tok.suppress() {
					lex.add_token(tok)
				}
			}
		}
		lex.add(token::Type::EOF, input.len(), input.len());
		Rc::new(lex)
	}

	fn add(&mut self, t: token::Type, lext: usize, rext: usize) {
		self.add_token(token::new(t, lext, rext, &self.i))
	}
	
	fn add_token(&mut self, tok: Rc<token::Token>) {
		self.tokens.push(tok)
	}
	
	fn scan(&mut self, i: usize) -> Rc<token::Token> {
		let mut s: State = 0;
		let mut typ = token::Type::Error;
		let mut rext = i;

		while s != NULL_STATE {
			if rext >= self.i.len() {
				typ = ACCEPT[s];
				s = NULL_STATE
			} else {
				typ = ACCEPT[s];
				s = NEXT_STATE[s](self.i[rext]);
				if s != NULL_STATE || typ == token::Type::Error {
					rext += 1
				}
			}
		}
		return token::new(typ, i, rext, &self.i)
	}

	/// get_line_column returns the (line, column) of char[i] in the input
	#[allow(dead_code)]
	pub fn get_line_column(&self, i: usize) -> (usize, usize) {
		let mut line = 1;
		let mut col = 1;
		let mut j = 0;
		while j < i {
			match self.i[j] {
			'\n' => {
				line += 1;
				col = 1
			},
			'\t' => col += 4,
			_ => col += 1
			}
			j += 1
		}
		(line, col)
	}
	
	/// get_line_column_of_token returns the (line, column) of token[i] 
	/// in the input
	#[allow(dead_code)]
	pub fn get_line_column_of_token(&self, i: usize) -> (usize, usize) {
		self.get_line_column(self.tokens[i].lext)
	}

	// get_string returns the input string from the left extent of Token[lext] to
	// the right extent of Token[rext]
	#[allow(dead_code)]
	pub fn get_string(&self, lext: usize, rext: usize) -> String {
		let lext = self.tokens[lext].lext;
		let rext = self.tokens[rext].rext;
		self.i[lext..rext].iter().collect::<String>()
	}
	
	}
/*** End of Lexer implementation ***/


fn load_file(fname: &String) -> io::Result<Vec<char>> {
	let input = fs::read_to_string(fname)?;
	let mut input: Vec<char> = input.chars().collect();
	if fname.ends_with(".md") {
        load_md(&mut input)?;
        Ok(input)
	} else {
		Ok(input)
	}
}

fn load_md(input: &mut Vec<char>) -> io::Result<()> {
    let mut i = 0;
    let mut text = true;
    while i < input.len() {
        if i <= input.len() - 3 && 
        || -> bool { input[i] == '`' && input[i+1] == '`' && input[i+2] == '`' }()
        {
            text = !text;
            for j in i..i+3 {
                input[j] = ' ';
            }
            i += 3;
        }
        if i < input.len() {
            if text {
                match input[i] {
                    '\n' => input[i] = '\n',
                    _ => input[i] = ' ',
                }
            }
            i += 1;
        }
    }
    Ok(())
}

#[allow(dead_code)]
fn any(r: char, set: &'static [char]) -> bool {
	for r1 in set.iter() {
		if &r == r1 {
			return true
		}
	}
	return false
}

#[allow(dead_code)]
fn not(r: char, set: &'static [char]) -> bool {
	for r1 in set.iter() {
		if &r == r1 {
			return false
		}
	}
	return true
}

static ACCEPT: [token::Type; 57] = [ 
    token::Type::Error, 
    token::Type::Error, 
    token::Type::T_7, 
    token::Type::T_0, 
    token::Type::T_1, 
    token::Type::Error, 
    token::Type::Error, 
    token::Type::Error, 
    token::Type::Error, 
    token::Type::T_13, 
    token::Type::T_4, 
    token::Type::T_5, 
    token::Type::T_6, 
    token::Type::T_12, 
    token::Type::T_12, 
    token::Type::T_12, 
    token::Type::T_12, 
    token::Type::T_17, 
    token::Type::T_18, 
    token::Type::T_12, 
    token::Type::Error, 
    token::Type::T_16, 
    token::Type::Error, 
    token::Type::T_2, 
    token::Type::T_13, 
    token::Type::T_3, 
    token::Type::T_9, 
    token::Type::Error, 
    token::Type::T_7, 
    token::Type::T_9, 
    token::Type::Error, 
    token::Type::Error, 
    token::Type::Error, 
    token::Type::T_13, 
    token::Type::T_12, 
    token::Type::T_12, 
    token::Type::T_12, 
    token::Type::T_12, 
    token::Type::T_12, 
    token::Type::Error, 
    token::Type::T_9, 
    token::Type::T_13, 
    token::Type::T_13, 
    token::Type::T_13, 
    token::Type::T_12, 
    token::Type::T_10, 
    token::Type::T_12, 
    token::Type::T_14, 
    token::Type::T_12, 
    token::Type::T_7, 
    token::Type::T_12, 
    token::Type::T_11, 
    token::Type::T_12, 
    token::Type::T_12, 
    token::Type::T_12, 
    token::Type::T_8, 
    token::Type::T_15, 
];

pub type NextFun = dyn Fn(char) -> State + Sync;

static NEXT_STATE: &'static [&NextFun; 57] = &[  
	// Set0 
	&|c| -> State {  
        if c == '"' { return 1 }; 
        if c == '#' { return 2 }; 
        if c == '(' { return 3 }; 
        if c == ')' { return 4 }; 
        if c == '+' { return 5 }; 
        if c == '-' { return 6 }; 
        if c == '.' { return 7 }; 
        if c == '/' { return 8 }; 
        if c == '0' { return 9 }; 
        if c == ':' { return 10 }; 
        if c == ';' { return 11 }; 
        if c == '=' { return 12 }; 
        if c == 'c' { return 13 }; 
        if c == 'f' { return 14 }; 
        if c == 'l' { return 15 }; 
        if c == 'r' { return 16 }; 
        if c == '{' { return 17 }; 
        if c == '}' { return 18 }; 
        if c.is_alphabetic() { return 19 }; 
        if any(c, &['0','1','2','3','4','5','6','7','8','9']) { return 9 }; 
        if any(c, &['+','-']) { return 20 }; 
        NULL_STATE
	}, 
	// Set1 
	&|c| -> State {  
        if c == '"' { return 21 }; 
        if c == '\\' { return 22 }; 
        if not(c, &['"','\\']) { return 1 }; 
        NULL_STATE
	}, 
	// Set2 
	&|c| -> State {  
        if not(c, &['\n']) { return 2 }; 
        NULL_STATE
	}, 
	// Set3 
	&|_| -> State {  
        NULL_STATE
	}, 
	// Set4 
	&|_| -> State {  
        NULL_STATE
	}, 
	// Set5 
	&|c| -> State {  
        if c == '+' { return 23 }; 
        if any(c, &['0','1','2','3','4','5','6','7','8','9']) { return 24 }; 
        NULL_STATE
	}, 
	// Set6 
	&|c| -> State {  
        if c == '-' { return 25 }; 
        if any(c, &['0','1','2','3','4','5','6','7','8','9']) { return 24 }; 
        NULL_STATE
	}, 
	// Set7 
	&|c| -> State {  
        if any(c, &['0','1','2','3','4','5','6','7','8','9']) { return 26 }; 
        NULL_STATE
	}, 
	// Set8 
	&|c| -> State {  
        if c == '*' { return 27 }; 
        if c == '/' { return 28 }; 
        NULL_STATE
	}, 
	// Set9 
	&|c| -> State {  
        if c == '.' { return 29 }; 
        if c == 'b' { return 30 }; 
        if c == 'o' { return 31 }; 
        if c == 'x' { return 32 }; 
        if any(c, &['0','1','2','3','4','5','6','7','8','9','_']) { return 33 }; 
        NULL_STATE
	}, 
	// Set10 
	&|_| -> State {  
        NULL_STATE
	}, 
	// Set11 
	&|_| -> State {  
        NULL_STATE
	}, 
	// Set12 
	&|_| -> State {  
        NULL_STATE
	}, 
	// Set13 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c == 'o' { return 34 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
	// Set14 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c == 'o' { return 35 }; 
        if c == 'u' { return 36 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
	// Set15 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c == 'e' { return 37 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
	// Set16 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c == 'e' { return 38 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
	// Set17 
	&|_| -> State {  
        NULL_STATE
	}, 
	// Set18 
	&|_| -> State {  
        NULL_STATE
	}, 
	// Set19 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
	// Set20 
	&|c| -> State {  
        if c == '+' { return 23 }; 
        if c == '-' { return 25 }; 
        if any(c, &['0','1','2','3','4','5','6','7','8','9']) { return 24 }; 
        NULL_STATE
	}, 
	// Set21 
	&|_| -> State {  
        NULL_STATE
	}, 
	// Set22 
	&|c| -> State {  
        if true { return 1 }; 
        NULL_STATE
	}, 
	// Set23 
	&|_| -> State {  
        NULL_STATE
	}, 
	// Set24 
	&|c| -> State {  
        if c == '.' { return 29 }; 
        if any(c, &['0','1','2','3','4','5','6','7','8','9','_']) { return 33 }; 
        NULL_STATE
	}, 
	// Set25 
	&|_| -> State {  
        NULL_STATE
	}, 
	// Set26 
	&|c| -> State {  
        if any(c, &['0','1','2','3','4','5','6','7','8','9']) { return 26 }; 
        NULL_STATE
	}, 
	// Set27 
	&|c| -> State {  
        if c == '*' { return 39 }; 
        if not(c, &['*']) { return 27 }; 
        NULL_STATE
	}, 
	// Set28 
	&|c| -> State {  
        if not(c, &['\n']) { return 28 }; 
        NULL_STATE
	}, 
	// Set29 
	&|c| -> State {  
        if any(c, &['0','1','2','3','4','5','6','7','8','9']) { return 40 }; 
        NULL_STATE
	}, 
	// Set30 
	&|c| -> State {  
        if any(c, &['0','1']) { return 41 }; 
        NULL_STATE
	}, 
	// Set31 
	&|c| -> State {  
        if any(c, &['0','1','2','3','4','5','6','7']) { return 42 }; 
        NULL_STATE
	}, 
	// Set32 
	&|c| -> State {  
        if any(c, &['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','a','b','c','d','e','f']) { return 43 }; 
        NULL_STATE
	}, 
	// Set33 
	&|c| -> State {  
        if any(c, &['0','1','2','3','4','5','6','7','8','9','_']) { return 33 }; 
        NULL_STATE
	}, 
	// Set34 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c == 'n' { return 44 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
	// Set35 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c == 'r' { return 45 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
	// Set36 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c == 'n' { return 46 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
	// Set37 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c == 't' { return 47 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
	// Set38 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c == 't' { return 48 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
	// Set39 
	&|c| -> State {  
        if c == '/' { return 49 }; 
        if not(c, &['/']) { return 27 }; 
        NULL_STATE
	}, 
	// Set40 
	&|_| -> State {  
        NULL_STATE
	}, 
	// Set41 
	&|c| -> State {  
        if any(c, &['0','1','_']) { return 41 }; 
        NULL_STATE
	}, 
	// Set42 
	&|c| -> State {  
        if any(c, &['0','1','2','3','4','5','6','7','_']) { return 42 }; 
        NULL_STATE
	}, 
	// Set43 
	&|c| -> State {  
        if any(c, &['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','_','a','b','c','d','e','f']) { return 43 }; 
        NULL_STATE
	}, 
	// Set44 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c == 'f' { return 50 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
	// Set45 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
	// Set46 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c == 'c' { return 51 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
	// Set47 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
	// Set48 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c == 'u' { return 52 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
	// Set49 
	&|_| -> State {  
        NULL_STATE
	}, 
	// Set50 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c == 'i' { return 53 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
	// Set51 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
	// Set52 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c == 'r' { return 54 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
	// Set53 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c == 'g' { return 55 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
	// Set54 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c == 'n' { return 56 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
	// Set55 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
	// Set56 
	&|c| -> State {  
        if c == '_' { return 19 }; 
        if c.is_alphabetic() { return 19 }; 
        if c.is_numeric() { return 19 }; 
        NULL_STATE
	}, 
];
