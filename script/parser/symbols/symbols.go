
// Package symbols is generated by gogll. Do not edit.
package symbols

type Symbol interface{
	isSymbol()
	IsNonTerminal() bool
	String() string
}

func (NT) isSymbol() {}
func (T) isSymbol() {}

// NT is the type of non-terminals symbols
type NT int
const( 
	NT_Assignment_Statement NT = iota
	NT_Compound_Statement 
	NT_Declaration_Statement 
	NT_Empty_Statement 
	NT_Expression 
	NT_Expression_Statement 
	NT_For 
	NT_Function_Argument 
	NT_Function_Argument_List 
	NT_Function_Argument_List_Body 
	NT_Function_Statement 
	NT_GoGLL 
	NT_Identifier_Expression 
	NT_IncDec_Expression 
	NT_Literal_Expression 
	NT_Return_Statement 
	NT_Simple_Statement 
	NT_Statement 
	NT_Statement_List 
)

// T is the type of terminals symbols
type T int
const( 
	T_0 T = iota // ( 
	T_1  // ) 
	T_2  // ++ 
	T_3  // -- 
	T_4  // : 
	T_5  // ; 
	T_6  // = 
	T_7  // comment 
	T_8  // config 
	T_9  // float_literal 
	T_10  // for 
	T_11  // func 
	T_12  // identifier 
	T_13  // integer_literal 
	T_14  // let 
	T_15  // return 
	T_16  // string_literal 
	T_17  // { 
	T_18  // } 
)

type Symbols []Symbol

func (ss Symbols) Strings() []string {
	strs := make([]string, len(ss))
	for i, s := range ss {
		strs[i] = s.String()
	}
	return strs
}

func (NT) IsNonTerminal() bool {
	return true
}

func (T) IsNonTerminal() bool {
	return false
}

func (nt NT) String() string {
	return ntToString[nt]
}

func (t T) String() string {
	return tToString[t]
}

var ntToString = []string { 
	"Assignment_Statement", /* NT_Assignment_Statement */
	"Compound_Statement", /* NT_Compound_Statement */
	"Declaration_Statement", /* NT_Declaration_Statement */
	"Empty_Statement", /* NT_Empty_Statement */
	"Expression", /* NT_Expression */
	"Expression_Statement", /* NT_Expression_Statement */
	"For", /* NT_For */
	"Function_Argument", /* NT_Function_Argument */
	"Function_Argument_List", /* NT_Function_Argument_List */
	"Function_Argument_List_Body", /* NT_Function_Argument_List_Body */
	"Function_Statement", /* NT_Function_Statement */
	"GoGLL", /* NT_GoGLL */
	"Identifier_Expression", /* NT_Identifier_Expression */
	"IncDec_Expression", /* NT_IncDec_Expression */
	"Literal_Expression", /* NT_Literal_Expression */
	"Return_Statement", /* NT_Return_Statement */
	"Simple_Statement", /* NT_Simple_Statement */
	"Statement", /* NT_Statement */
	"Statement_List", /* NT_Statement_List */ 
}

var tToString = []string { 
	"(", /* T_0 */
	")", /* T_1 */
	"++", /* T_2 */
	"--", /* T_3 */
	":", /* T_4 */
	";", /* T_5 */
	"=", /* T_6 */
	"comment", /* T_7 */
	"config", /* T_8 */
	"float_literal", /* T_9 */
	"for", /* T_10 */
	"func", /* T_11 */
	"identifier", /* T_12 */
	"integer_literal", /* T_13 */
	"let", /* T_14 */
	"return", /* T_15 */
	"string_literal", /* T_16 */
	"{", /* T_17 */
	"}", /* T_18 */ 
}

var stringNT = map[string]NT{ 
	"Assignment_Statement":NT_Assignment_Statement,
	"Compound_Statement":NT_Compound_Statement,
	"Declaration_Statement":NT_Declaration_Statement,
	"Empty_Statement":NT_Empty_Statement,
	"Expression":NT_Expression,
	"Expression_Statement":NT_Expression_Statement,
	"For":NT_For,
	"Function_Argument":NT_Function_Argument,
	"Function_Argument_List":NT_Function_Argument_List,
	"Function_Argument_List_Body":NT_Function_Argument_List_Body,
	"Function_Statement":NT_Function_Statement,
	"GoGLL":NT_GoGLL,
	"Identifier_Expression":NT_Identifier_Expression,
	"IncDec_Expression":NT_IncDec_Expression,
	"Literal_Expression":NT_Literal_Expression,
	"Return_Statement":NT_Return_Statement,
	"Simple_Statement":NT_Simple_Statement,
	"Statement":NT_Statement,
	"Statement_List":NT_Statement_List,
}
